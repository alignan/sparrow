### Zoul Makefile

IMAGE_TYPE_REMOTE_REVA  = 70B3D57D51000001
IMAGE_TYPE_FIREFLY      = 70B3D57D51000002
IMAGE_TYPE_REMOTE_REVB  = 70B3D57D51000003
IMAGE_TYPE_FIREFLY_REVA = 70B3D57D51000004

ifndef CONTIKI
  $(error CONTIKI not defined! You must specify where CONTIKI resides!)
endif

ifndef SPARROW
  $(error SPARROW not defined! You must specify where SPARROW resides!)
endif

ifndef SPARROW_TOOLS
  $(error SPARROW_TOOLS not defined! You must specify where SPARROW resides!)
endif

### If no board is specified the default option is the RE-Mote revision B
ifeq ($(BOARD),)
  BOARD=remote-revb
  CFLAGS += -DCONTIKI_BOARD_REMOTE_REVB=1
endif

### As previously the RE-Mote revision A was plainly defined as remote, keep for
### backward compatibility
ifeq ($(BOARD), remote)
  override BOARD = remote-reva
  CFLAGS += -DCONTIKI_BOARD_REMOTE_REVA=1
endif

CFLAGS += -DCONTIKI_TARGET_ZOUL=1

ifdef MAKE_WITH_868
  CFLAGS+=-DWITH_868=1
endif

ifdef MAKE_WITH_920
  CFLAGS+=-DWITH_920=1
endif

ifeq ($(BOARD), remote-reva)
  IMAGE_TYPE = $(IMAGE_TYPE_REMOTE_REVA)
else ifeq ($(BOARD), firefly)
  IMAGE_TYPE = $(IMAGE_TYPE_FIREFLY)
else ifeq ($(BOARD), remote-revb)
  IMAGE_TYPE = $(IMAGE_TYPE_REMOTE_REVB)
else ifeq ($(BOARD), firefly-reva)
  IMAGE_TYPE = $(IMAGE_TYPE_FIREFLY_REVA)
else ifeq ($(BOARD),)
  ${error BOARD not specified, please specify a Zoul board!}
endif

ifeq ($(IMAGE_TYPE),)
  ${error IMAGE_TYPE not found for BOARD $(BOARD)}
endif

PYTHON = python
BSL_FLAGS += -e -w -v

BSL_SPEED ?= 460800

# Works in Linux and probably on OSX too (RTCC example)
CFLAGS += -DDATE="\"`date +"%02u %02d %02m %02y %02H %02M %02S"`\""

### Configure the build for the board and pull in board-specific sources
CONTIKI_TARGET_DIRS += . dev
CONTIKI_TARGET_DIRS += $(BOARD)

### Include the original zoul platform device drivers
CONTIKI_TARGET_DIRS += ${addprefix ../../contiki/platform/zoul/,. dev $(BOARD)}

### Include the board dir if one exists
-include $(CONTIKI)/platform/zoul/$(BOARD)/Makefile.$(BOARD)
-include $(CONTIKI_TARGET_PLATFORM)/$(BOARD)/Makefile.$(BOARD)

### Include
CONTIKI_TARGET_SOURCEFILES += contiki-main.c
CONTIKI_TARGET_SOURCEFILES += cc1200-zoul-arch.c
CONTIKI_TARGET_SOURCEFILES += adc-zoul.c button-sensor.c zoul-sensors.c
CONTIKI_TARGET_SOURCEFILES += leds-ext-arch.c temperature-arch.c
CONTIKI_TARGET_SOURCEFILES += $(BOARD_SOURCEFILES)

CONTIKI_SOURCEFILES += $(CONTIKI_TARGET_SOURCEFILES)

CLEAN += *.zoul-sparrow *.flash zoul-sparrow-firmware.jar

### Unless the example dictates otherwise, build with code size optimisations
ifndef SMALL
  SMALL = 1
endif

### Define the CPU directory
CONTIKI_CPU=$(SPARROW)/cpu/cc2538
include $(CONTIKI_CPU)/Makefile.cc2538

MODULES += core/net core/net/mac \
           core/net/mac/contikimac \
           core/net/llsec core/net/llsec/noncoresec

ifeq ($(WITH_IP64),1)
  MODULES += core/net/ip64
endif

EXTERNAL_MODULES += $(SPARROW)/dev/cc1200

EXTERNAL_MODULES += $(SPARROW)/lib/image-trailer

BSL = $(CONTIKI)/tools/cc2538-bsl/cc2538-bsl.py

### Use the specific Zoul subplatform to query for connected devices
ifdef MOTELIST_ZOLERTIA
  MOTELIST_FLAGS += -b $(MOTELIST_ZOLERTIA)
endif

### Detect if a mote is connected over serial port
ifeq ($(HOST_OS),Darwin)
  USBDEVPREFIX=
  MOTELIST := $(CONTIKI)/tools/zolertia/motelist-zolertia-macos
  MOTES := $(shell $(MOTELIST) -c 2>&- | cut -f 2 -d ,)
  SERIALDUMP := $(CONTIKI)/tools/sky/serialdump-macos
else
### If we are not running under Mac, we assume Linux
  USBDEVPREFIX=
  SERIALDUMP := $(CONTIKI)/tools/sky/serialdump-linux
  MOTELIST := $(CONTIKI)/tools/zolertia/motelist-zolertia
  MOTES := $(shell $(MOTELIST) $(MOTELIST_FLAGS) -c 2>&- | cut -f 2 -d , | \
            perl -ne 'print $$1 . " " if(m-(/dev/\w+)-);')
endif

include $(SPARROW_TOOLS)/Makefile.include

### If PORT is defined, override to keep backward compatibility
ifdef PORT
  MOTES := $(PORT)
endif

### Check the BSL script exists
ifeq ($(wildcard $(BSL)), )
%.upload:
	@echo "ERROR: Could not find the cc2538-bsl script. Did you run 'git submodule update --init' ?"
else
### Upload to every MOTE
%.upload: $(foreach MOTE,$(MOTES),%.$(MOTE))
	@# Dummy recipe to prevent "No rule to make *.upload errors"
endif

ifeq ($(wildcard $(BSL)), )
%.upload-image:
	@echo "ERROR: Could not find the cc2538-bsl script. Did you run 'git submodule update --init' ?"
else
%.upload-image: %.bin
	BSL_ADDRESS_ARG=0x00200000
	$(PYTHON) $(BSL) $(BSL_FLAGS) -p $(USBDEVPREFIX)$(firstword $(MOTES)) $(BSL_ADDRESS_ARG) $<
endif

upload-rescue-image: rescue-$(BOARD).upload-image

### Variable that expands into a pattern rule to upload to a given MOTE.
### Requires $(MOTE) to be defined
### $$$$ Double escapes $s that need to be passed to the shell - once for when make parses UPLOAD_RULE, and once for when the expanded rule is parsed by make.
define UPLOAD_RULE
%.$(MOTE): %.bin %.elf
	@echo "Flashing $(MOTE)"
	@BSL_ADDRESS=`$(OBJDUMP) -h $$*.elf | grep -B1 LOAD | \
	             grep -Ev 'LOAD|\-\-' | awk '{print "0x" $$$$5}' | \
	             sort -g | head -1`; \
	$(PYTHON) $(BSL) $(BSL_FLAGS) -b $(BSL_SPEED) -a $$$${BSL_ADDRESS} -p $(MOTE) $$<
endef

### Create an upload rule for every MOTE connected
$(foreach MOTE,$(MOTES),$(eval $(UPLOAD_RULE)))

motelist:
	$(MOTELIST)
zoul-motelist:
	$(MOTELIST) $(MOTELIST_FLAGS)
zoul-motes:
	@echo $(MOTES)

serialview:
	$(SERIALDUMP) -b115200 $(USBDEVPREFIX)$(firstword $(MOTES)) | $(CONTIKI)/tools/timestamp

login:
	$(SERIALDUMP) -b115200 $(USBDEVPREFIX)$(firstword $(MOTES))
